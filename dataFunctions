import pandas as pd
import csv
import matplotlib.pyplot as plt
import tkinter as tk

def extractColumn(columnNumber):       
    # code to read the data
    data = pd.read_csv('spotify-2023.csv', encoding = 'latin1')
    with open ('spotify-2023.csv', 'r') as f:
        csv_reader = csv.reader(f)
        next(csv_reader) # this line skips the header

        #now we can read the data from any column using the columnNumber parameter
        columnData = []
        for row in csv_reader:
            data = row[columnNumber]
            columnData.append(data)
        return columnData

def extractRow(rowNumber): # code to extract a particular row from the data
    data = pd.read_csv('spotify-2023.csv', encoding = 'ISO-8859-1')
    rowData = data.loc[rowNumber]
    return rowData

def removeDuplicates(list): # code to remove any duplicates from the list if needed
    newList = []
    for item in list:
        if item not in newList:
            newList.append(item)
    return newList
            
def mapToInteger(userList):
    mappedList = []
    for item in userList:
        try:
            mappedList.append(int(item))
        except ValueError:
            # If the item cannot be converted to an integer, ignore it
            mappedList.append(-1)
    return mappedList

def createLineGraph(title, subtitle, xData, yData, xLabel, yLabel): # code to create a basic graph using user data
    fig, ax = plt.subplots()
    fig.suptitle(title)
    ax.set_title(subtitle)
    ax.set_xlabel(xLabel)
    ax.set_ylabel(yLabel)
    ax.plot(sorted(xData), sorted(yData))
    plt.show()


def createScatterGraph(title, subtitle, xData, yData, xLabel, yLabel):
    plt.title(title)
    plt.suptitle(subtitle)
    plt.scatter(xData, yData)
    plt.xlabel(xLabel)
    plt.ylabel(yLabel)
    plt.show()

def createBarChart(title, subtitle, xData, yData, xLabel, yLabel):
    plt.title(title)
    plt.suptitle(subtitle)
    plt.bar(xData, yData)
    plt.xlabel(xLabel)
    plt.ylabel(yLabel)
    plt.show()

    
#Example of how to use functions
#bpmData = mapToInteger(extractColumn(14))
#streamsData = mapToInteger(extractColumn(8))
#createLineGraph("Graph of BPM against Streams", "Example", bpmData, streamsData, "BPM", "Streams")

#--- CODE YOUR INDIVIDUAL WORK IN THIS SPACE ---

artistNameData = extractColumn(1)
spotifyPlaylistData = mapToInteger(extractColumn(6))
createLineGraph("Artist Name In Spotify Playlists", "Finding the Artists in the Spotify Playlist", artistNameData, spotifyPlaylistData, "Artist Name", "Spotify Playlist")

artistNameData = extractColumn(1)
spotifyChartsData = mapToInteger(extractColumn(7))
createLineGraph("Artist Name in Spotify Charts", "Finding the Artists in the Spotify Charts", artistNameData, spotifyChartsData, "Artist Name", "Spotify Charts")

artistNameData = extractColumn(1)
applePlaylistData = mapToInteger(extractColumn(9))
createLineGraph("Artist Name in Apple Playlist", "Finding the Artists in the Apple Playlist", artistNameData, applePlaylistData, "Artist Name", "Apple Playlist")

artistNameData = extractColumn(1)
appleChartsData = mapToInteger(extractColumn(10))
createLineGraph("Artist Name in Apple Charts", "Finding the Artist in the Apple Charts", artistNameData, appleChartsData, "Artist Name", "Apple Charts")

artistNameData = extractColumn(1)
shazamChartsData = mapToInteger(extractColumn(13))
createLineGraph("Artist Name in Shazam Charts", "Finding the Artist in the Shazam Charts", artistNameData, shazamChartsData, "Artist Name", "Shazam Charts")

    
keyData = (extractColumn(15))
streamsData = mapToInteger(extractColumn(8))
createBarChart("Graph of Key's Affect on Streams", "Example", keyData, streamsData, "Key", "Streams")



# GRAPHICAL USER INTERFACE 
# GUI function
def button_clicked(option):
    if option in range(1, 6):
        if option == 1: # e.g. this is ALEX'S ANALYSIS
            xData = mapToInteger(extractColumn(14))  
            yData = mapToInteger(extractColumn(8))
            createLineGraph("Graph of BPM against Streams", "Example", xData, yData, "BPM", "Streams")
 #      if option == 2: INSERT NEXT ANALYSIS HERE
    else:
        label.config(text="Invalid option")

# GUI setup
root = tk.Tk()
root.title("Graph Menu")
root.configure(bg="black")

label = tk.Label(root, text= "Select the graph analysis you would like to display: ", fg = 'green', bg = 'black')
label.pack(pady=10)

for i in range(1, 8):
    button = tk.Button(root, text=f"Option {i}", command=lambda opt=i: button_clicked(opt))
    button.config(fg = 'green')
    button.pack(pady=5)

# Space for an image
canvas = tk.Canvas(root, width=300, height=200)
canvas.config(bg = 'black')
canvas.pack(pady=10)

# Load and display the image
image_path = "img/Spotify.png" 
image = tk.PhotoImage(file=image_path)
canvas.create_image(0, 0, anchor="nw", image=image)

# Exit button
exit_button = tk.Button(root, text="Exit", command=root.quit)
exit_button.pack(pady=5)

root.mainloop()
